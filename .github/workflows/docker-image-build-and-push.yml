name: 'Docker Image Build & Push (Deploy to Staging)'

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:

  build-and-push-services:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20.x]
        scope: [split-micro-users]
    name: Lerna Build ${{ matrix.scope }} using Node v${{ matrix.node-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install
      - run: yarn lerna run --scope ${{ matrix.scope }} build
      - name: Get Package Version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: ./
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Split-Micro B&P
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./services/${{ matrix.scope }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.scope }}:${{ steps.package-version.outputs.current-version}}

  build-and-push-ui-production:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20.x]
        scope: [split-ui]
    name: Lerna Build ${{ matrix.scope }} using Node v${{ matrix.node-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install
      - run: yarn lerna run --scope ${{ matrix.scope }} build
      - name: Get Package Version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: ./
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Split-UI Production B&P
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./ui/${{ matrix.scope }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.scope }}:${{ steps.package-version.outputs.current-version}}

  build-and-push-ui-staging:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20.x]
        scope: [split-ui]
    name: Lerna Build Staging ${{ matrix.scope }} using Node v${{ matrix.node-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install
      - run: yarn lerna run --scope ${{ matrix.scope }} build:stage
      - name: Get Package Version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: ./
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Split-UI Staging B&P
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./ui/${{ matrix.scope }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.scope }}:stage-${{ steps.package-version.outputs.current-version}}

  deploy-to-staging:
    needs: [build-and-push-services, build-and-push-ui-staging]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.27.0' # default is latest stable
        id: install
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Update Kubeconfig
        run: aws eks update-kubeconfig --name jonathanlee-io-cluster
      - name: Run Helm Upgrade
        run: |
          cd deployment &&
          helm dependency build &&
          helm upgrade split-direct-staging . --values ./values/staging-values.yaml
