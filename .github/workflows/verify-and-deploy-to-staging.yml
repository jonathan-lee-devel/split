name: 'Verify & Deploy to Staging'

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: read

jobs:
  snyk:
    name: Synk Code Test
    permissions:
      contents: read
      security-events: write
      actions: read
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - name: Set up Snyk CLI to check for security issues
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Snyk Auth
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
      - name: Snyk Code test
        run: snyk code test -d --sarif > snyk-code.sarif || true
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-code.sarif

  codeql-analyze:
    needs: [snyk]
    name: CodeQL Analyze
    runs-on: ubuntu-22.04
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['typescript']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  lint:
    needs: [codeql-analyze]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20.x]
    name: Lerna Fix-Lint using Node v${{ matrix.node-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install
      - run: yarn lerna run fix-lint

  build:
    needs: [lint]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20.x]
    name: Lerna Build using Node v${{ matrix.node-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install
      - run: yarn lerna run build
      - run: yarn lerna run test

  build-and-test:
    needs: [build]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20.x]
    name: Lerna Build & Test using Node v${{ matrix.node-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install
      - run: yarn lerna run build
      - run: yarn lerna run test

  sonarcloud-analysis:
    needs: [build-and-test]
    name: SonarCloud Analysis and Quality Gate
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - name: Install Dependencies
        run: yarn install
      - name: Build Packages and Services
        run: yarn lerna run build
      - name: Run Tests
        run: yarn lerna run test
      - name: Aggregate Coverage
        run: ./coverage.sh
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args:
            -Dsonar.projectKey=jonathan-lee-devel_split
            -Dsonar.organization=jonathan-lee-devel
            -Dsonar.sources=packages/split-auth,packages/split-constants,packages/split-observability,services/split-micro-users/src,services/split-micro-properties/src,services/split-micro-expenses/src
            -Dsonar.tests=services/split-micro-users/src,services/split-micro-properties/src,services/split-micro-expenses/src
            -Dsonar.inclusions=**
            -Dsonar.exclusions=**/*.spec.ts,**/index.ts,**/src/app.ts,**/src/routes.ts,**/src/server.ts,**/src/middleware/request-middleware.ts,**/src/logger.ts,**/src/lib/**.ts,**/src/models/**/**.ts
            -Dsonar.test.inclusions=src/**/*.spec.ts,src/**/*.spec.tsx,src/**/*.test.ts,src/**/*.test.tsx
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov/lcov.info
            -Dsonar.qualitygate.wait=true

  build-and-push-services:
    needs: [sonarcloud-analysis]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20.x]
        scope:
        - split-micro-users
        - split-micro-properties
        - split-micro-expenses
    name: Lerna Build ${{ matrix.scope }} using Node v${{ matrix.node-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install
      - run: yarn lerna run --scope '@split-micro/${{ matrix.scope }}' --include-dependencies build
      - name: Get Package Version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: ./
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: ${{ matrix.scope }} B&P
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./services/${{ matrix.scope }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.scope }}:${{ steps.package-version.outputs.current-version}}

  build-and-push-ui-production:
    needs: [sonarcloud-analysis]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20.x]
        scope: [split-ui]
    name: Lerna Build ${{ matrix.scope }} using Node v${{ matrix.node-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install
      - run: yarn lerna run --scope @split-ui/${{ matrix.scope }} --include-dependencies build
      - name: Get Package Version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: ./
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Split-UI Production B&P
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./ui/${{ matrix.scope }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.scope }}:${{ steps.package-version.outputs.current-version}}

  build-and-push-ui-staging:
    needs: [sonarcloud-analysis]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20.x]
        scope: [split-ui]
    name: Lerna Build ${{ matrix.scope }}-staging using Node v${{ matrix.node-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install
      - run: yarn lerna run --scope @split-ui/${{ matrix.scope }} --include-dependencies build:stage
      - name: Get Package Version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: ./
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Split-UI Staging B&P
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./ui/${{ matrix.scope }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.scope }}:stage-${{ steps.package-version.outputs.current-version}}

  deploy-to-staging:
    needs: [build-and-push-services, build-and-push-ui-staging, build-and-push-ui-production]
    name: Deploy to Staging
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install kubectl
        uses: azure/setup-kubectl@v3.0
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Update Kubeconfig
        run: aws eks update-kubeconfig --name jonathanlee-io-cluster
      - name: Run Helm Upgrade
        run: cd deployment && helm dependency build && helm upgrade split-direct-staging . --install --wait --timeout 10m0s --values ./values/staging-values.yaml
      - name: Delete Pods to Ensure Latest
        run: kubectl delete --all pods --namespace=split-staging
      - name: Await Pods to Ready State
        run: kubectl wait -n split-staging --for=condition=ready pod -l app=split-direct-staging --timeout=600s
